"""
Student information for this assignment:

Replace KAREN NGU with your name.
On my/our honor, KAREN NGU, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: KN9995
UT EID 2: NONE
"""

def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
         integer 2 or greater and strictly less than the length
         of string
    post: returns a single string that is encoded with
         rail fence algorithm
    """
    if not string:
        return ""
    if key >= len(string):
        return string
    rails = ['' for _ in range(key)]
    rail = 0
    direction = 1
    for char in string:
        rails[rail] += char
        if rail == 0:
            direction = 1
        elif rail == key - 1:
            direction = -1
        rail += direction
    return "".join(rails)

def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
         integer 2 or greater and strictly less than the length
         of string
    post: function returns a single string that is decoded with
         rail fence algorithm
    """
    if not string:
        return ""
    if key >= len(string):
        return string
    n = len(string)
    pattern = [0] * n
    rail = 0
    direction = 1
    for i in range(n):
        pattern[i] = rail
        if rail == 0:
            direction = 1
        elif rail == key - 1:
            direction = -1
        rail += direction
    rail_counts = [0] * key
    for r in pattern:
        rail_counts[r] += 1
    rails = []
    index = 0
    for count in rail_counts:
        rails.append(list(string[index:index+count]))
        index += count
    result = []
    for r in pattern:
        result.append(rails[r].pop(0))
    return "".join(result)

def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
         removes all digits, punctuation marks, and spaces. It
         returns a single string with only lower case characters
    """
    return "".join(c for c in string.lower() if c.isalpha())

def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
         in the plain text
    post: function returns a single character encoded using the
         Vigenere algorithm. You may not use a 2-D list
    """
    offset = (ord(p) - ord('a') + ord(s) - ord('a')) % 26
    return chr(offset + ord('a'))

def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
         in the encrypted text
    post: function returns a single character decoded using the
         Vigenere algorithm. You may not use a 2-D list
    """
    offset = (ord(s) - ord('a') - (ord(p) - ord('a'))) % 26
    return chr(offset + ord('a'))

def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
         Vigenere algorithm
    """
    filtered = filter_string(string)
    encoded = []
    for i, char in enumerate(filtered):
        p = phrase[i % len(phrase)].lower()
        encoded.append(encode_character(p, char))
    return "".join(encoded)

def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
         Vigenere algorithm
    """
    filtered = filter_string(string)
    decoded = []
    for i, char in enumerate(filtered):
        p = phrase[i % len(phrase)].lower()
        decoded.append(decode_character(p, char))
    return "".join(decoded)

def main():
    """Main function that reads stdin and runs each cipher"""
    # read the plain text from stdin (terminal/input)
    plain_text_rf = input().rstrip("\n")
    # read the key from stdin (terminal/input)
    rail_key_encode = int(input().strip())
    # encrypt and print the encoded text using rail fence cipher
    encoded_rf = rail_fence_encode(plain_text_rf, rail_key_encode)
    # read encoded text from stdin (terminal/input)
    encoded_rf_input = input().rstrip("\n")
    # read the key from stdin (terminal/input)
    rail_key_decode = int(input().strip())
    # decrypt and print the plain text using rail fence cipher
    decoded_rf = rail_fence_decode(encoded_rf_input, rail_key_decode)
    # read the plain text from stdin (terminal/input)
    plain_text_vig = input().rstrip("\n")
    # read the pass phrase from stdin (terminal/input)
    pass_phrase_encode = input().rstrip("\n")
    # encrypt and print the encoded text using Vigenere cipher
    encoded_vig = vigenere_encode(plain_text_vig, pass_phrase_encode)
    # read the encoded text from stdin (terminal/input)
    encoded_vig_input = input().rstrip("\n")
    # read the pass phrase from stdin (terminal/input)
    pass_phrase_decode = input().rstrip("\n")
    # decrypt and print the plain text using Vigenere cipher
    decoded_vig = vigenere_decode(encoded_vig_input, pass_phrase_decode)
    
    print("Rail Fence Cipher")
    print()
    print("Plain Text: " + plain_text_rf)
    print("Key: " + str(rail_key_encode))
    print("Encoded Text: " + encoded_rf)
    print()
    print("Encoded Text: " + encoded_rf_input)
    print("Enter Key: " + str(rail_key_decode))
    print("Decoded Text: " + decoded_rf)
    print()
    print("Vigenere Cipher")
    print()
    print("Plain Text: " + plain_text_vig)
    print("Pass Phrase: " + pass_phrase_encode)
    print("Encoded Text: " + encoded_vig)
    print()
    print("Encoded Text: " + encoded_vig_input)
    print("Pass Phrase: " + pass_phrase_decode)
    print("Decoded Text: " + decoded_vig)

# Do NOT modify the following code.
if __name__ == "__main__":
    main()
